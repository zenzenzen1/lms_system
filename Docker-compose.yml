version: '3.8'
services:
    db:
        container_name: lms_postgres_db
        image: postgres
        restart: always
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=123
        ports:
            - '5432:5432'
        volumes:
            - ./sql/initdb.sql:/docker-entrypoint-initdb.d/init-script.sql
        networks:
            - lms_network
    pgadmin_service:
        image: dpage/pgadmin4
        restart: always
        environment:
            - PGADMIN_DEFAULT_EMAIL=email@gmail.com
            - PGADMIN_DEFAULT_PASSWORD=root
        ports:
            - "8070:80"
        depends_on:
            - db
        networks:
            - lms_network
    redis_service:
        hostname: redis-host
        image: redis:7.2.5
        container_name: lms_redis_service
        restart: always
        ports:
            - "6379:6379"
        networks:
            - lms_network
        environment:
            - REDIS_PORT=6379
    mongo:
        hostname: mongo-host
        container_name: lms_mongo_db
        image: bitnami/mongodb:latest
        restart: always
        ports:
            - '27017:27017'
        environment:
          - MONGODB_ROOT_USER=root
          - MONGODB_ROOT_PASSWORD=123
        networks:
            - lms_network
    kafka:
        image: 'bitnami/kafka:3.7.0'
        container_name: kafka
        hostname: kafka
        ports:
            - '9094:9094'
        restart: always
        environment:
            - KAFKA_CFG_NODE_ID=0
            - KAFKA_CFG_PROCESS_ROLES=controller,broker
            - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
            - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
            - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
            - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
        networks:
            - lms_network
    schedule-service:
        hostname: schedule-service
        container_name: lms_schedule_service
        build:
            # context: ./lms_system_server
            # dockerfile: Dockerfile
            context: .
            dockerfile: DockerfileTest
        ports:
            - "8081:8081"
            - "8085:8085"
        networks:
            - lms_network
        depends_on:
            - db
            - redis_service
        environment:
            - REDIS_HOST=redis-host
            - REDIS_PORT=6379
            - KAFKA_HOST=kafka:9094
            - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/lms_system
            - SPRING_DATASOURCE_USERNAME=postgres
            - SPRING_DATASOURCE_PASSWORD=123
            - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
            - IDENTITY_SERVICE=http://identity-service:8001/identity 
            - MONGO_HOST=mongo-host
        # command: cd lms_system_server
        command: mvn -f lms_system_server/pom.xml spring-boot:run -Dspring-boot.run.profiles=prod
      
    identity_service:
        hostname: identity-service
        container_name: lms_identity_service
        build:
            context: ./identity_service
            dockerfile: Dockerfile
        ports:
            - "8001:8001"
        networks:
            - lms_network
        depends_on:
            - db
            - redis_service
        environment:
            - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/lms_identity_service
            - SPRING_DATASOURCE_USERNAME=postgres
            - SPRING_DATASOURCE_PASSWORD=123
            - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
            - LMS_SERVICE=http://lms-system-service:8081/lms
        command: mvn spring-boot:run -Dspring-boot.run.profiles=prod
    api_gateway:
        hostname: api-gateway
        container_name: api_gateway
        build:
            context: ./api_gateway_lms
            dockerfile: Dockerfile
        ports:
            - "8090:8090"
        environment:
            - IDENTITY_SERVICE=http://identity-service:8001/identity
            - LMS_SERVICE=http://lms-system-service:8081/lms
        command: mvn spring-boot:run -Dspring-boot.run.profiles=prod
        networks:
            - lms_network
    lms_notification_service:
        hostname: lms-notification-service
        container_name: lms-notification
        build:
            context: ./lms_notification_service
            dockerfile: Dockerfile
        ports:
            - "8085:8085"
        environment:
            - MONGO_HOST=mongo-host
            - KAFKA_HOST=kafka 
        command: mvn spring-boot:run -DskipTests
        depends_on:
            - mongo
            - kafka
        networks:
            - lms_network
networks:
    lms_network:
        driver: bridge
