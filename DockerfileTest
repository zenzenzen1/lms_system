FROM maven:3.9.8-sapmachine-22 as build
WORKDIR /app
COPY ./lms_notification_service lms_notification_service
COPY ./lms_system_server lms_system_server
# RUN cd lms_system_server && mvn clean install
# RUN cd ../lms_notification_service && mvn spring-boot:run -DskipTests
# CMD mvn spring-boot:run

# RUN mvn install:install-file -DcreateChecksum=true -Dclassifier=sources -Dfile="lms_system-0.0.1-SNAPSHOT.jar" -DgroupId="com.example" -DartifactId="lms_system" -Dversion="0.0.1-SNAPSHOT" -Dpackaging=jar -DgeneratePom=true -Dclassifier=sources
# RUN mvn install
# COPY lms_notification_service lms_notification_service

# you get the idea:
# COPY moduleN/pom.xml moduleN/pom.xml

# COPY pom.xml .
# RUN mvn -B -e -C org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline

# if you have modules that depends each other, you may use -DexcludeArtifactIds as follows
# RUN mvn -B -e -C org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline -DexcludeArtifactIds=module1

# Copy the dependencies from the DEPS stage with the advantage
# of using docker layer caches. If something goes wrong from this
# line on, all dependencies from DEPS were already downloaded and
# stored in docker's layers.
# FROM maven:3.6-alpine as BUILDER
# WORKDIR /opt/app
# COPY --from=deps /root/.m2 /root/.m2
# COPY --from=deps /opt/app/ /opt/app
# COPY module1/src /opt/app/module1/src
# COPY module2/src /opt/app/module2/src

# use -o (--offline) if you didn't need to exclude artifacts.
# if you have excluded artifacts, then remove -o flag
# RUN mvn -B -e -o clean install -DskipTests=true

# # At this point, BUILDER stage should have your .jar or whatever in some path
# FROM openjdk:8-alpine
# WORKDIR /opt/app
# COPY --from=builder /opt/app/target/my-1.0.0.jar .
# EXPOSE 8001
# CMD [ "java", "-jar", "/opt/app/my-1.0.0.jar" ]